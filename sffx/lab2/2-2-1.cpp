/************************************************************************************
简要描述：回溯法解八皇后问题。
*************************************************************************************/
#include<stdio.h>
#include<math.h>
void BackTrack(int t);  
int place(int k);
void out(void);       
   
int n=8;                   /* 皇后个数 */
int x[8]={0};              /* 当前解向量 */
int sum;                   /* 当前已找到的可行方案数 */
int main(void) 
{
	BackTrack(0);             /* 找8皇后问题的解 */
    printf("\n %d\n",sum);    /* 输出可行方案数 */
	return 0;
}

/************************************************************************************
函数名称：BackTrack
函数功能：八皇后问题的回溯算法。
          考虑第t个皇后。 
函数参数：t表示行号。
函数返回值：无。
************************************************************************************/	 
void BackTrack(int t)  
{  
  int i;
  if(t>=n)   out(); /* 到达叶结点 */
  else   /* 搜索 */
	  for(i=0;i<n;i++)  {  /*依次将第t行的皇后放在每一列*/
		  x[t]=i;   /* 尝试把第t行的皇后放在第i列 */
		  if(place(t))   /* 如果合法，则继续递归 */
			  BackTrack(t+1);
    }
} 

/************************************************************************************
函数名称：place
函数功能：约束条件：1)不同列 2)不处于同一正、反对角线
          判断第k行皇后是否和前面的皇后在同一列或同一斜线
函数参数：k表示行号。
函数返回值：冲突返回0；否则，返回1。
************************************************************************************/	 
int place(int k)          
{
  int j;
  for(j=0;j<k;j++)
    if((fabs(k-j)==fabs(x[j]-x[k]))||(x[j]==x[k])) return 0;
  return 1;
}
void out()
{
	int i,j;
	sum++;     /* 方案数增1 */	
	printf("\n");
    for(i=0;i<n;i++)  { /* 输出一个可行解 */
		for(j=0;j<x[i];j++)printf(" .");
		printf(" *");
        for(j=0;j<7-x[i];j++)printf(" .");
		putchar('\n');
	}
}
